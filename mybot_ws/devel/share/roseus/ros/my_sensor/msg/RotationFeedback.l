;; Auto-generated. Do not edit!


(when (boundp 'my_sensor::RotationFeedback)
  (if (not (find-package "MY_SENSOR"))
    (make-package "MY_SENSOR"))
  (shadow 'RotationFeedback (find-package "MY_SENSOR")))
(unless (find-package "MY_SENSOR::ROTATIONFEEDBACK")
  (make-package "MY_SENSOR::ROTATIONFEEDBACK"))

(in-package "ROS")
;;//! \htmlinclude RotationFeedback.msg.html


(defclass my_sensor::RotationFeedback
  :super ros::object
  :slots (_current_orientation ))

(defmethod my_sensor::RotationFeedback
  (:init
   (&key
    ((:current_orientation __current_orientation) 0.0)
    )
   (send-super :init)
   (setq _current_orientation (float __current_orientation))
   self)
  (:current_orientation
   (&optional __current_orientation)
   (if __current_orientation (setq _current_orientation __current_orientation)) _current_orientation)
  (:serialization-length
   ()
   (+
    ;; float32 _current_orientation
    4
    ))
  (:serialize
   (&optional strm)
   (let ((s (if strm strm
              (make-string-output-stream (send self :serialization-length)))))
     ;; float32 _current_orientation
       (sys::poke _current_orientation (send s :buffer) (send s :count) :float) (incf (stream-count s) 4)
     ;;
     (if (null strm) (get-output-stream-string s))))
  (:deserialize
   (buf &optional (ptr- 0))
   ;; float32 _current_orientation
     (setq _current_orientation (sys::peek buf ptr- :float)) (incf ptr- 4)
   ;;
   self)
  )

(setf (get my_sensor::RotationFeedback :md5sum-) "bd917ecfbe26055b91a2641b9ec145ff")
(setf (get my_sensor::RotationFeedback :datatype-) "my_sensor/RotationFeedback")
(setf (get my_sensor::RotationFeedback :definition-)
      "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
float32 current_orientation


")



(provide :my_sensor/RotationFeedback "bd917ecfbe26055b91a2641b9ec145ff")


